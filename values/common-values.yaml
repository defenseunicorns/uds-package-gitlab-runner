# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

unregisterRunners: false

# Create a non-default service account with the name gitlab-runner with minimal permissions
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: [""]
      verbs: [""]

serviceAccount:
  name: gitlab-runner

kubernetesSandbox:
  enableSecurityExceptions: ###ZARF_VAR_ENABLE_SECURITY_CAPABILITIES###

runners:
  secret: gitlab-gitlab-runner-secret
  job:
    namespace: "###ZARF_VAR_RUNNER_SANDBOX_NAMESPACE###"
  helper:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      runAsGroup: 0
  executor: kubernetes
  allowedPullPolicies: []

  fleeting:
    maxInstances: 10
    pluginConfig:
      name: "my-linux-asg" # AWS Autoscaling Group name
    connectorConfig:
      username: "ec2-user"
      use_external_addr: true
    policy:
      idle_count: 5
      idle_time: "20m0s"
    registry: "gitlab-runner-registry.{{ .Release.Namespace }}.svc.cluster.local"
    repository: gitlab-org/fleeting/plugins/aws
    tag: "1.0.0"

  config: |
    [[runners]]
      url = "https://gitlab.###ZARF_VAR_DOMAIN###"
      clone_url = "https://gitlab.###ZARF_VAR_DOMAIN###"
      cache_dir = "/tmp/gitlab-runner/cache"
    {{- if eq .Values.runners.executor "docker-autoscaler" }}
      [runners.docker]
          image = "{{ printf "%s/%s:%s" .Values.runners.job.registry .Values.runners.job.repository .Values.runners.job.tag }}"
          volumes = ["/var/run/docker.sock:/var/run/docker.sock"]
    {{- end }}
    {{- if has .Values.runners.executor (list "instance" "docker-autoscaler") }}
      [runners.autoscaler]
        plugin = "{{ printf "%s/%s:%s" (tpl .Values.runners.fleeting.registry .) .Values.runners.fleeting.repository .Values.runners.fleeting.tag }}"

        capacity_per_instance = 1
        max_use_count = 1
        max_instances = {{ .Values.runners.fleeting.maxInstances }}
        [runners.autoscaler.plugin_config]
          {{- toToml .Values.runners.fleeting.pluginConfig | nindent 10 }}
        [runners.autoscaler.connector_config]
          {{- toToml .Values.runners.fleeting.connectorConfig | nindent 10 }}
        [[runners.autoscaler.policy]]
          idle_count = {{ .Values.runners.fleeting.policy.idle_count }}
          idle_time = {{ .Values.runners.fleeting.policy.idle_time | quote }}
    {{- else }}
      [runners.kubernetes]
        namespace = "{{ .Values.runners.job.namespace }}"
        helper_image = "{{ printf "%s/%s:%s" .Values.runners.helper.registry .Values.runners.helper.repository .Values.runners.helper.tag }}"
        image = "{{ printf "%s/%s:%s" .Values.runners.job.registry .Values.runners.job.repository .Values.runners.job.tag }}"
        image_pull_secrets = ["private-registry"]
      {{- if .Values.runners.allowedPullPolicies }}
        allowed_pull_policies = [{{ range $index, $val := .Values.runners.allowedPullPolicies }}{{ if $index }}, {{ end }}"{{ $val }}"{{ end }}]
      {{- end }}
      [runners.kubernetes.pod_labels]
        "job_id" = "${CI_JOB_ID}"
        "job_name" = "${CI_JOB_NAME}"
        "pipeline_id" = "${CI_PIPELINE_ID}"
        "uds/user" = "${UDS_RUN_AS_USER}"
        "uds/group" = "${UDS_RUN_AS_GROUP}"
        "uds/network-access-gitlab" = "true"
      {{- if .Values.kubernetesSandbox.enableSecurityExceptions }}
      [runners.kubernetes.build_container_security_context]
        [runners.kubernetes.build_container_security_context.capabilities]
          add = ["SETUID", "SETGID"]
      {{- end }}
      [runners.kubernetes.helper_container_security_context]
        run_as_non_root = {{ .Values.runners.helper.securityContext.runAsNonRoot }}
        run_as_user = {{ .Values.runners.helper.securityContext.runAsUser }}
        run_as_group = {{ .Values.runners.helper.securityContext.runAsGroup }}
    {{- end }}

concurrent: 50

podSecurityContext:
  runAsUser: 100
  fsGroup: 65534

securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  privileged: false
  capabilities:
    drop: ["ALL"]

service:
  enabled: true
metrics:
  enabled: true
  portName: http-metrics

resources:
  limits:
    memory: 256Mi
    cpu: 200m
  requests:
    memory: 256Mi
    cpu: 200m

volumes:
  - emptyDir: {}
    name: gitlab-runner
  - emptyDir: {}
    name: gitlab-runner-home

volumeMounts:
  - name: gitlab-runner
    mountPath: /.gitlab-runner
  - name: gitlab-runner-home
    mountPath: /home/gitlab-runner
